#+TITLE: jmpool : C++ 11 实现的高效内存池（大小内存均适合）

* 项目目的
为了高效的内存管理，实现的一个简单的内存池。
* 设计与实现
内存池分为两个部分，和 STL 一样分为两个部分，但实现细节不一样。
** 第一层配置器
- 采用内存池技术，每次在申请大块内存时，首先将其提升至 8bytes 的倍数，但用户不可见，都是配置器处理，在回收的时候也是自动提升至 8 bytes
的倍数，避免内存泄露。不过也存在缺点，就是内存碎片。不过比起高效的内存配置，我觉得是值得的。
- 在申请时，本库实现的是动态增加方式，块数 =N = 2*size + heap_size / BIGSZ= ； =N=　表示本次申请的实际总字节， =size= 表示用户本次的申请的字节数，heap_size 是目前已分配的总大小，BIGSZ 是第一级配置器和第二级配置器的阈值，默认是 4096 bytes。
- 深情顺序：空闲块（如果有超过的部分，会根据大小决定放在第二层配置器对应的空闲
  块，还是放在自己的空闲块） -> 系统堆分配
- 回收内存时，直接加入空闲链表中（根据字节大小），如果发现有连续的内存块直接合并
  为一个。

** 第二层配置器
1. 采用伙伴系统实现，维护大小分别为 8,16,32,...,4096 共10空闲链表。
2. 每次申请块数为 16 块，这样做的目的是方便算出在申请字节数的 16 倍的空闲块
3. 申请顺序：对应空闲链表 -> 小于等于 16 倍的其它空闲块 -> 大与等于 16 倍的空闲
   块 -> 系统堆分配
4. 系统分配：和第一层一样，采用动态增加方式，不过后面那个块数是根据最大空闲
   链表来申请的，所以说内存池实际上都会在这10个空闲块中，不会有其它的空闲块
5. 回收内存：直接从向下最小的空闲块开始依次添加到空闲块（地址大小顺序），如果有
   地址连续的合并为下一个空闲块
   
** 与 STL 空间配置器的比较
- STL 的第一级没有采用内存池，只是简单地对 C 库函数的封装
- STL 的第二级配置器的链表是根据 8bytes 的倍数，本库为2的幂次
- STL 的阈值为 128bytes, 本库为 4096 bytes.
- STL 适合小的内存频繁分配，本库都适合，大一些可能效果更好，如缓
  
* 安装与卸载
** 安装前
本库依赖于本人写的一个日志库 [[https://github.com/Jerling/jlog][jlog]]，主要是调试用的

** 只编译
#+BEGIN_SRC bash
./build.sh 
#+END_SRC

** 编译并安装
#+BEGIN_SRC bash
./build.sh install
#+END_SRC
* 一个简单的例子
#+BEGIN_SRC C++
#include <bits/stdc++.h>
#include "jmpool.h"
int main(int argc, char *argv[]) {
  auto alloc = jmp::jmp_allocator(
      jlog::logger::new_logger("jmp", {1}, jlog::log_level_t::info));
  char *test_b = (char *)alloc.allocate(4096);
  strcpy(test_b, "small test");
  INFO("test_b is %s on %p and size is %d\n", test_b, test_b, 4096);
  alloc.deallocate(test_b, 4096);

  char *test_s = (char *)alloc.allocate(32);
  strcpy(test_s, "big test");
  INFO("test_s is %s on %p and size is %d\n", test_s, test_s, 32);
  alloc.deallocate(test_s, 32);

  int *p_int = nullptr;
  p_int = (int *)alloc.allocate(sizeof(int));
  jmp::details::_construct(p_int, 1);
  INFO("Construct in %p with value is %d and size is %d\n", p_int, *p_int,
       sizeof(int));
  alloc.deallocate(p_int, sizeof(int));

  return 0;
}
#+END_SRC
* 代码统计
[[./img/codes.png]]
* TODO TODOS [0/1]
- [ ] 常用数据结构的设计
